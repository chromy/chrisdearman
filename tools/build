#!/usr/bin/env python3
import os
import subprocess
import pathlib
import json

ROOT = os.path.dirname(os.path.dirname(__file__))
OUT = os.path.join(ROOT, "out")
SITE = os.path.join(OUT, "site")
SRC_PATH = os.path.join(ROOT, "src")
INDEX_TEMPLATE_PATH = os.path.join(SRC_PATH, "index.html")
CSS_PATH = os.path.join(SRC_PATH, "style.css")
JS_PATH = os.path.join(SRC_PATH, "script.js")
FAVICON_PATH = os.path.join(SRC_PATH, "favicon-data-url.txt")
OBIT_PATH = os.path.join(SRC_PATH, "obit.txt")

OUTPUT_PATH = os.path.join(SITE, "index.html")
ASSETS_PATH = os.path.join(SITE, "assets")

MEMORY_HTML = '''
<div class="flex pt-3">
  <div class="mb-4 flex-shrink-0 sm:mb-0 sm:mr-4">
  {avatar}
  </div>
  <div>
    <p class="mt-1">{text}</p>
    <h4 style="font-variant-caps: small-caps;">{contributor}</h4>
  </div>
</div>
'''

AVATAR_PLACEHOLDER = '''
<span class="inline-block h-16 w-16 rounded-full overflow-hidden bg-gray-100">
  <svg class="h-full w-full text-gray-300" fill="currentColor" viewBox="0 0 24 24">
    <path d="M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z" />
  </svg>
</span>
'''

def main():
  pathlib.Path(OUT).mkdir(parents=True, exist_ok=True)
  pathlib.Path(SITE).mkdir(parents=True, exist_ok=True)

  try:
    os.unlink(ASSETS_PATH)
  except FileNotFoundError:
    pass
  os.symlink("../../assets", ASSETS_PATH)

  with open(INDEX_TEMPLATE_PATH) as f:
    template = f.read()
  css = subprocess.check_output([
    "npx",
    "tailwindcss",
    "-i",
    CSS_PATH,
  ]).decode("utf8")
  with open(JS_PATH) as f:
    js = f.read()
  with open(OBIT_PATH) as f:
    obit = f.read()
  with open(FAVICON_PATH) as f:
    favicon = f.read()

  def memory_html(obj):
      try:
        contributor = obj["contributor"]
        text = obj["text"]
      except KeyError:
          return ""

      try:
        avatar_url = obj["avatar_url"]
        avatar = f'<img class="inline-block h-16 w-16 rounded-full" src="{avatar_url}" alt="">'
      except KeyError:
        avatar = AVATAR_PLACEHOLDER

      return MEMORY_HTML.format(
        contributor=contributor,
        text=text,
        avatar=avatar,
      )

  memories = ""
  for name in os.listdir(SRC_PATH):
    if not name.endswith(".json"):
      continue
    path = os.path.join(SRC_PATH, name)
    with open(path) as f:
      obj = json.load(f)
      memories = memories + memory_html(obj)

  index_souce = template.format(
    css=css,
    js=js,
    obit=obit,
    memories=memories,
    favicon=favicon,
  )
  with open(OUTPUT_PATH, "w") as f:
    f.write(index_souce)

if __name__ == "__main__":
  main()
